/*
 * Â© Copyright 2017-2022 Micro Focus or one of its affiliates.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.13.2'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

project.group = projectGroup
project.version = projectVersion

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://nexus.octane.admlabs.aws.swinfra.net/nexus/content/repositories/mqm-snapshots'
        allowInsecureProtocol = true
    }
}

clean.doLast {
    file('.sandbox').deleteDir()
}

sourceSets {
    main {
        java.srcDir 'src/main/java'
        resources.srcDir 'src/main/resources'
    }
    test {
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'
    }
}

dependencies {
    implementation("com.hpe.adm.octane.ideplugins:octane-plugin-common:$commonVersion") {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    //use javafx modules only at compile time based on the current OS
    def javaFxVersion = '11.0.2'
    def javaFxModules = ['graphics', 'swing', 'base', 'web']
    def currentOS = org.gradle.internal.os.OperatingSystem.current()
    def platform

    if (currentOS.isWindows()) {
        platform = 'win'
    } else if (currentOS.isLinux()) {
        platform = 'linux'
    } else if (currentOS.isMacOsX()) {
        platform = 'mac'
    }

    javaFxModules.each { module ->
        compileOnly "org.openjfx:javafx-${module}:${javaFxVersion}:${platform}"
    }

    implementation group: 'org.jsoup', name: 'jsoup', version: '1.8.3'

    implementation('com.google.inject:guice:4.0') {
        exclude group: 'com.google.guava', module: 'guava'
    }
    implementation('com.google.inject.extensions:guice-multibindings:4.0') {
        exclude group: 'com.google.guava', module: 'guava'
    }

    testImplementation group: 'junit', name: 'junit', version: '4.11'
}

intellij {
    plugins = ['com.intellij.java']

    version = project.hasProperty("intellijVersion") ? project.getProperty("intellijVersion") : ideaVersion
    //to debug the plugin on other platforms comment out alternativeIdePath and set the path to the installation
    //folder of the IDE
    //alternativeIdePath 'C:\\DevTools\\PyCharm Community Edition 2018.2.1'

    plugins = ["maven", "gradle"]
    pluginName = project.hasProperty('zipname') ? project.getProperty('zipname') : "Octane IntelliJ Plugin"
    updateSinceUntilBuild = false

    downloadSources = true
    sandboxDir = project.rootDir.canonicalPath + "/.sandbox"
}

tasks.withType(JavaExec) {
    jvmArgs '--add-exports', 'java.base/jdk.internal.vm=ALL-UNNAMED'
    if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9099'
    }
}

tasks.processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task copyDependencies(type: Copy) {
    from configurations.runtimeClasspath
    into project.rootDir.canonicalPath + '/build/stat'
}

configurations.all {
    exclude module: 'logback-classic-1.2.3'
}